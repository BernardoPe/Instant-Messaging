CREATE OR REPLACE FUNCTION PREVENT_REUSED_INVITATION()
    RETURNS TRIGGER AS
$$
BEGIN
    IF NEW.STATUS = 'USED' AND OLD.STATUS = 'USED' THEN
        RAISE EXCEPTION 'Cannot reuse an invitation';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER PREVENT_REUSED_INVITATION_TRIGGER
    BEFORE UPDATE
    ON IM_INVITATION
    FOR EACH ROW
EXECUTE FUNCTION PREVENT_REUSED_INVITATION();

CREATE OR REPLACE FUNCTION PREVENT_INVALID_CHANNEL_INVITATION()
    RETURNS TRIGGER AS
$$
BEGIN
    IF EXISTS(SELECT 1
              FROM channel_member
              WHERE channel_id = NEW.channel_id
                AND user_id = NEW.invitee) THEN
        RAISE EXCEPTION 'Cannot invite a member';
    end if;
    IF EXISTS (SELECT 1
               FROM CHANNEL_INVITATION
               WHERE channel_id = NEW.channel_id
                 AND invitee = NEW.invitee
                 AND status = 'PENDING'
                 AND expires_at > CURRENT_TIMESTAMP) THEN
        RAISE EXCEPTION 'Cannot send duplicate invitation';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER PREVENT_DUPLICATE_CHANNEL_INVITATION_TRIGGER
    BEFORE INSERT
    ON CHANNEL_INVITATION
    FOR EACH ROW
EXECUTE FUNCTION PREVENT_INVALID_CHANNEL_INVITATION();