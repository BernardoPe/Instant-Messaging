-- Creates the tables and constraints for the database schema.
DROP TABLE IF EXISTS ACCESS_TOKEN CASCADE;
DROP TABLE IF EXISTS REFRESH_TOKEN CASCADE;
DROP TABLE IF EXISTS IM_INVITATION CASCADE;
DROP TABLE IF EXISTS CHANNEL_MEMBER CASCADE;
DROP TABLE IF EXISTS CHANNEL_INVITATION CASCADE;
DROP TABLE IF EXISTS MESSAGE CASCADE;
DROP TABLE IF EXISTS CHANNEL CASCADE;
DROP TABLE IF EXISTS SESSION CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;
DROP INDEX IF EXISTS IDX_MESSAGE_CREATED_AT;
DROP INDEX IF EXISTS IDX_CHANNEL_INVITATION_CHANNEL_ID;
DROP INDEX IF EXISTS IDX_CHANNEL_INVITATION_INVITEE;
DROP INDEX IF EXISTS IDX_CHANNEL_MEMBER_USER_ID;

CREATE TABLE USERS
(
    id       BIGSERIAL PRIMARY KEY,
    name     VARCHAR(30) UNIQUE NOT NULL,
    password VARCHAR(100)       NOT NULL,
    email    VARCHAR(50) UNIQUE NOT NULL,
    CONSTRAINT valid_email CHECK (email ~* '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$' )
);

CREATE TABLE SESSION
(
    id         BIGSERIAL PRIMARY KEY,
    user_id    BIGINT    NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    expires_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL '7 DAY'
);

CREATE TABLE ACCESS_TOKEN
(
    token      UUID PRIMARY KEY,
    session_id BIGINT    NOT NULL REFERENCES SESSION (ID) ON DELETE CASCADE,
    expires_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL '1 DAY'
);

CREATE TABLE REFRESH_TOKEN
(
    token      UUID PRIMARY KEY,
    session_id BIGINT NOT NULL REFERENCES SESSION (id) ON DELETE CASCADE
);

CREATE TABLE IM_INVITATION
(
    token      UUID PRIMARY KEY,
    expires_at TIMESTAMP   NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL '7 DAY',
    status     VARCHAR(10) NOT NULL DEFAULT 'PENDING'
        CONSTRAINT valid_im_invitation_status CHECK (status IN ('PENDING', 'USED'))
);

CREATE TABLE CHANNEL
(
    id         BIGSERIAL PRIMARY KEY,
    name       VARCHAR(30) UNIQUE NOT NULL,
    default_role VARCHAR(10) NOT NULL DEFAULT 'MEMBER',
    owner      BIGINT             NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    is_public  BOOLEAN            NOT NULL,
    created_at TIMESTAMP          NOT NULL DEFAULT CURRENT_TIMESTAMP

    CONSTRAINT valid_channel_role CHECK (default_role IN ('MEMBER', 'GUEST'))
);

CREATE TABLE CHANNEL_MEMBER
(
    channel_id BIGINT      NOT NULL REFERENCES CHANNEL (id) ON DELETE CASCADE,
    user_id    BIGINT      NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    role       VARCHAR(10) NOT NULL DEFAULT 'MEMBER',

    PRIMARY KEY (channel_id, user_id),

    CONSTRAINT valid_member_role CHECK (role IN ('OWNER', 'MEMBER', 'GUEST'))
);

CREATE TABLE MESSAGE
(
    id         BIGSERIAL,
    channel_id BIGINT    NOT NULL REFERENCES CHANNEL (id) ON DELETE CASCADE,
    user_id    BIGINT    NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    content    TEXT      NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    edited_at  TIMESTAMP          DEFAULT NULL,
    PRIMARY KEY (channel_id, id)
);

CREATE TABLE CHANNEL_INVITATION
(
    id         BIGSERIAL PRIMARY KEY,
    channel_id BIGINT      NOT NULL REFERENCES CHANNEL (id) ON DELETE CASCADE,
    inviter    BIGINT      NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    invitee    BIGINT      NOT NULL REFERENCES USERS (id) ON DELETE CASCADE,
    expires_at TIMESTAMP   NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL '7 DAY',
    role       VARCHAR(10) NOT NULL DEFAULT 'MEMBER',
    status     VARCHAR(10) NOT NULL DEFAULT 'PENDING',

    CONSTRAINT valid_channel_invitation_status CHECK (status IN ('PENDING', 'ACCEPTED', 'REJECTED')),
    CONSTRAINT valid_channel_role CHECK (role IN ('MEMBER', 'GUEST'))
);

CREATE INDEX IDX_MESSAGE_CREATED_AT ON MESSAGE (created_at);
CREATE INDEX IDX_CHANNEL_INVITATION_CHANNEL_ID ON CHANNEL_INVITATION (channel_id);
CREATE INDEX IDX_CHANNEL_INVITATION_INVITEE ON CHANNEL_INVITATION (invitee);
CREATE INDEX IDX_CHANNEL_MEMBER_USER_ID ON CHANNEL_MEMBER (user_id);