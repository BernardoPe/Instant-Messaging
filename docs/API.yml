openapi: 3.0.3
info:
  title: Instant Messaging API
  description: API for managing messaging channels
  version: 1.0.0
  # Antonio Paulino - 50512
  # Bernardo Pereira - 50493
tags:
  - name: Authentication
  - name: Users
  - name: Channels
  - name: Messaging
  - name: Invitations

components:
  schemas:
    UserCreationInputModel:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        invitation:
          type: string
          format: uuid
      required:
        - username
        - password
        - email
        - invitation
    AuthenticationInputModel:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
      oneOf:
        - required: [ username ]
        - required: [ email ]
    CredentialsOutputModel:
      type: object
      properties:
        sessionID:
          type: integer
        user:
          $ref: '#/components/schemas/UserOutputModel'
        accessToken:
          $ref: '#/components/schemas/AccessTokenOutputModel'
        refreshToken:
          $ref: '#/components/schemas/RefreshTokenOutputModel'
    ImInvitationCreationInputModel:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
    ImInvitationOutputModel:
      type: object
      properties:
        token:
          type: string
          format: uuid
    UserOutputModel:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
    AccessTokenOutputModel:
      type: object
      properties:
        token:
          type: string
          format: uuid
        expiresAt:
          type: string
          format: date-time
    RefreshTokenOutputModel:
      type: object
      properties:
        token:
          type: string
          format: uuid
        expiresAt:
          type: string
          format: date-time
    UsersPaginatedOutputModel:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserOutputModel'
        pagination:
          $ref: '#/components/schemas/PaginationOutputModel'
    ChannelsOutputModel:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelOutputModel'
    PaginationOutputModel:
      type: object
      properties:
        current:
          type: integer
        next:
          type: integer
        previous:
          type: integer
        totalPages:
          type: integer
        total:
          type: integer
    ChannelCreationInputModel:
      type: object
      properties:
        name:
          type: string
        isPublic:
          type: boolean
      required:
        - name
        - isPublic
    ChannelOutputModel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        isPublic:
          type: boolean
        owner:
          $ref: '#/components/schemas/UserOutputModel'
        members:
          type: array
          items:
            $ref: '#/components/schemas/ChannelMemberOutputModel'
        createdAt:
          type: string
          format: date-time
    ChannelMemberOutputModel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        role:
          type: string
          enum: [ owner, member, guest ]
    ChannelsPaginatedOutputModel:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelOutputModel'
        pagination:
          $ref: '#/components/schemas/PaginationOutputModel'
    MessageCreationInputModel:
      type: object
      properties:
        content:
          type: string
      required:
        - content
    MessageOutputModel:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        author:
          type: string
        createdAt:
          type: string
          format: date-time
        editedAt:
          type: string
          format: date-time
    MessageUpdateOutputModel:
      type: object
      properties:
        editedAt:
          type: string
          format: date-time
    MessagesPaginatedOutputModel:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageOutputModel'
        pagination:
          $ref: '#/components/schemas/PaginationOutputModel'
    ChannelInvitationCreationInputModel:
      type: object
      properties:
        invitee:
          type: integer
        role:
          type: string
          enum: [ owner, member, guest ]
        expiresAt:
          type: string
          format: date-time
      required:
        - expiresAt
        - role
    ChannelInvitationUpdateInputModel:
      type: object
      properties:
        role:
          type: string
          enum: [ owner, member, guest ]
        expiresAt:
          type: string
          format: date-time
    ChannelInvitationsOutputModel:
      type: object
      properties:
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/InvitationOutputModel'
    InvitationOutputModel:
      type: object
      properties:
        invitationID:
          type: integer
        role:
          type: string
          enum: [ owner, member, guest ]
        expirationDate:
          type: string
          format: date-time
    InvitationAcceptInputModel:
      type: object
      properties:
        status:
          type: string
          enum: [ accepted, rejected ]
      required:
        - status
    Problem:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
          format: uri
        status:
          type: integer
        detail:
          type: string
    InputValidationProblem:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
          format: uri
        status:
          type: integer
        detail:
          type: string
        errors:
          type: array
          items:
            type: string
    ChannelUpdateInputModel:
      type: object
      properties:
        name:
          type: string
        isPublic:
          type: boolean
      required:
        - name
        - isPublic
    ChannelCreationOutputModel:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
    MessageCreationOutputModel:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
        editedAt:
          type: string
          format: date-time
    ChannelInvitationCreationOutputModel:
      type: object
      properties:
        id:
          type: integer
paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationInputModel'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsOutputModel'
        '400':
          description: Bad request, possibly due to invalid input or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '409':
          description: Conflict, user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationInputModel'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsOutputModel'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh the access token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout a user
      responses:
        '200':
          description: User logged out successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/auth/invitations:
    post:
      tags:
        - Authentication
      summary: Create an invitation
      requestBody:
        description: Invitation details
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImInvitationCreationInputModel'
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImInvitationOutputModel'
        '400':
          description: Invalid invitation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
  /api/users:
    get:
      tags:
        - Users
      summary: Get a list of all users
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 50
            maximum: 100
            minimum: 1
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: getCount
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [ id, name, email ]
            default: name
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginatedOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/users/{userID}:
    get:
      tags:
        - Users
      summary: Get details of a specific user by ID
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/users/{userID}/channels:
    get:
      tags:
        - Users
      summary: Get a list of all channels a user is a member of
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: number
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [ id, name, createdAt ]
            default: name
      responses:
        '200':
          description: List of channels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelsOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have access to this information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/channels:
    post:
      tags:
        - Channels
      summary: Create a new channel
      requestBody:
        description: Details to create a new channel, either public or private
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelCreationInputModel'
      responses:
        '201':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCreationOutputModel'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/channels/{channelID}:
    get:
      tags:
        - Channels
      summary: Get channel details by ID
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Details of the channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: User is not a member of the channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    patch:
      tags:
        - Channels
      summary: Update the channel's details
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: New channel details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelUpdateInputModel'
      responses:
        '204':
          description: Channel updated successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, only owner can update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel not found / Invite not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Channels
      summary: Delete a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
      responses:
        '204':
          description: Channel deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, only owner can delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/channels/{channelID}/members/{userID}:
    put:
      tags:
        - Channels
      summary: Join a public channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: userID
          in: path
          required: true
          schema:
            type: number
      responses:
        '201':
          description: User added successfully
        '400':
          description: Channel is private / User is already a member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: User cannot join the channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Channels
      summary: Remove a user from a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: userID
          in: query
          required: true
          schema:
            type: number
      responses:
        '204':
          description: User left successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have permission to remove user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

  /api/channels/{channelID}/messages:
    get:
      tags:
        - Messaging
      summary: Get messages from a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 50
            maximum: 100
          description: Number of messages per page
        - name: getCount
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
          description: Sort order for messages
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [ id, createdAt, editedAt ]
            default: createdAt
          description: Sort by field
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessagesPaginatedOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have access to this information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'

    post:
      tags:
        - Messaging
      summary: Create a message in a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreationInputModel'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageCreationOutputModel'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/channels/{channelID}/messages/{messageID}:
    get:
      tags:
        - Messaging
      summary: Get a message from a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: messageID
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Message retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have access to this information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel or message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      tags:
        - Messaging
      summary: Edit a message in a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: messageID
          in: path
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreationInputModel'
      responses:
        '200':
          description: Message edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageUpdateOutputModel'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not own the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel or message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Messaging
      summary: Delete a message from a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: messageID
          in: path
          required: true
          schema:
            type: number
      responses:
        '204':
          description: Message deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have permission to delete the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel or message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/channels/{channelID}/invitations:
    get:
      tags:
        - Invitations
      summary: Get a list of all channel invitations for a channel
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [ id, expiresAt, role ]
            default: expiresAt
      responses:
        '200':
          description: List of channel invitations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelInvitationsOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have access to this information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Invitations
      summary: Create a channel invitation
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Details to create a channel invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelInvitationCreationInputModel'
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelInvitationCreationOutputModel'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have permission to create an invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/channels/{channelID}/invitations/{invitationID}:
    patch:
      tags:
        - Invitations
      summary: Update invite permissions and expiration date
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: invitationID
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: Invitation status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelInvitationUpdateInputModel'
      responses:
        '204':
          description: Invitation status updated successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have access to this information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel or invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Invitations
      summary: Delete a channel invitation
      parameters:
        - name: channelID
          in: path
          required: true
          schema:
            type: number
        - name: invitationID
          in: path
          required: true
          schema:
            type: number
      responses:
        '204':
          description: Invitation deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have permission to delete the invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Channel or invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/users/{userID}/invitations:
    get:
      tags:
        - Invitations
      summary: Get a list of all channel invitations for a user
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [ id, expiresAt ]
            default: expiresAt
      responses:
        '200':
          description: List of channel invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelInvitationsOutputModel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have access to this information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/users/{userID}/invitations/{invitationID}:
    patch:
      tags:
        - Invitations
      summary: Accept or decline a channel invitation
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
        - name: invitationID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Invitation status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationAcceptInputModel'
      responses:
        '204':
          description: Invitation status updated successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputValidationProblem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden, user does not have access to this invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: User or invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'